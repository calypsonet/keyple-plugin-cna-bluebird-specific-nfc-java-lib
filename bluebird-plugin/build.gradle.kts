import java.time.Year
plugins {
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-parcelize")
    id("org.jetbrains.dokka")
    id("com.diffplug.spotless")
    id("maven-publish")
}

val archivesBaseName: String by project
val copyright: String by project
val currentYear = Year.now().value.toString()

android {
    namespace = "org.calypsonet.keyple.plugin.bluebird"
    compileSdk = 35

    buildFeatures {
        viewBinding = true
    }

    defaultConfig {
        minSdk = 21
    }

    buildTypes {
        getByName("release") {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    val javaSourceLevel: String by project
    val javaTargetLevel: String by project
    compileOptions {
        sourceCompatibility = JavaVersion.toVersion(javaSourceLevel)
        targetCompatibility = JavaVersion.toVersion(javaTargetLevel)
    }

    kotlinOptions {
        jvmTarget = javaTargetLevel
    }

    lint {
        abortOnError = false
    }

    sourceSets {
        getByName("main").java.srcDirs("src/main/kotlin")
        getByName("debug").java.srcDirs("src/debug/kotlin")
        getByName("test").java.srcDirs("src/test/kotlin")
        getByName("androidTest").java.srcDirs("src/androidTest/kotlin")
    }
}

dependencies {
    // Kotlin
    implementation(kotlin("stdlib-jdk8"))
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0")

    // Bluebird libs
    compileOnly(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))

    // Keyple
    implementation("org.eclipse.keyple:keyple-common-java-api:2.0.1")
    implementation("org.eclipse.keyple:keyple-plugin-java-api:2.3.1")
    implementation("org.eclipse.keyple:keyple-util-java-lib:2.4.0")

    // Logging
    implementation("com.jakewharton.timber:timber:5.0.1")
}

publishing {
    publications {
        // This says: defer this block until all of the other stuff has run first.
        // This is required since components["release"] is generated by the Android
        // plugin in `afterEvaluate` itself, which forces us to do the same.
        afterEvaluate {
            // Create a new publication called "release". The maven-publish plugin
            // creates tasks named publish${name}PublicationTo${target}, where
            // ${name} is a capitalized form of the name and ${target} is an output
            // repository. By default a MavenLocal target is automatically added,
            // which outputs to ~/.m2/repository.
            create<MavenPublication>("mavenJava") {
                // Include all artifacts from the "release" component. This is the
                // .aar file along with the sources and javadoc .jars.
                from(components["release"])
                // Here we configure some properties of the publication (these are
                // automatically applied to the pom file). Your library will be
                // referenced as ${groupId}:${artifactId}.
                groupId = project.group.toString()
                artifactId = archivesBaseName
                version = project.version.toString()
            }
        }
    }
}

tasks {
    dokka {
        moduleName.set(archivesBaseName)
        dokkaSourceSets.main {
            includes.from("src/main/kdoc/overview.md")
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl("https://github.com/calypsonet/$archivesBaseName")
                remoteLineSuffix.set("#L")
            }
        }
        pluginsConfiguration.html {
            footerMessage.set(copyright.replace("YEAR", currentYear))
        }
    }
}


